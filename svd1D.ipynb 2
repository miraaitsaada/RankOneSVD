{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy.linalg import norm\n",
    "from random import normalvariate\n",
    "from math import sqrt\n",
    "from scipy.io import loadmat\n",
    "import matplotlib.pylab as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def randomUnitVector(n):\n",
    "    unnormalized = [normalvariate(0, 1) for _ in range(n)]\n",
    "    theNorm = sqrt(sum(x * x for x in unnormalized))\n",
    "    return [x / theNorm for x in unnormalized]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def svd_1d(X, epsilon=1e-10):\n",
    "    A = np.array(X)\n",
    "    \n",
    "    n, m = A.shape\n",
    "    \n",
    "    Dr = np.diag(A.sum(axis=1))\n",
    "    Dc = np.diag(A.sum(axis=0))\n",
    "    \n",
    "    Dc_1 = np.linalg.inv(Dc)\n",
    "    Dr_1 = np.linalg.inv(Dr)\n",
    "    \n",
    "    col1 = np.concatenate([np.zeros((n,n)), np.dot(Dc_1 , A.T)])\n",
    "    col2 = np.concatenate([np.dot(Dr_1 , A), np.zeros((m,m))])\n",
    "    \n",
    "    S = np.concatenate([col1, col2], axis=1)\n",
    "    \n",
    "    x = randomUnitVector(n+m)\n",
    "    lastV = None\n",
    "    currentV = x\n",
    "    \n",
    "    lastE = np.linalg.norm(currentV)\n",
    "\n",
    "    iterations = 0\n",
    "    while True:\n",
    "        iterations += 1\n",
    "        lastV = np.array(currentV)\n",
    "        currentV = np.dot(S, lastV)\n",
    "        currentV = currentV / norm(currentV)\n",
    "        \n",
    "        last_u = lastV[list(range(0,n))]\n",
    "        last_v = lastV[list(range(n,n+m))]\n",
    "        \n",
    "        current_u = currentV[list(range(0,n))]\n",
    "        current_v = currentV[list(range(n,n+m))]\n",
    "        \n",
    "        e_u = np.linalg.norm(current_u - last_u)\n",
    "        e_v = np.linalg.norm(current_v - last_v)\n",
    "        \n",
    "        currentE = e_u + e_v\n",
    "        \n",
    "        d = abs(currentE - lastE)\n",
    "        lastE = currentE\n",
    "        \n",
    "        if d <= epsilon:\n",
    "            print(\"converged in {} iterations!\".format(iterations))\n",
    "\n",
    "            u = currentV[range(0,n)]\n",
    "            v = currentV[range(n,n+m)]\n",
    "            \n",
    "            return u, v"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DonnÃ©es Townships :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "      <th>F</th>\n",
       "      <th>G</th>\n",
       "      <th>H</th>\n",
       "      <th>I</th>\n",
       "      <th>J</th>\n",
       "      <th>K</th>\n",
       "      <th>L</th>\n",
       "      <th>M</th>\n",
       "      <th>N</th>\n",
       "      <th>O</th>\n",
       "      <th>P</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>HighSchool</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AgricultCoop</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Railstation</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OneRoomSchool</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Veterinary</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NoDoctor</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NoWaterSupply</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PoliceStation</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LandReallocation</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P\n",
       "HighSchool        0  0  0  0  0  0  0  1  0  0  1  0  0  0  0  0\n",
       "AgricultCoop      0  1  1  1  0  0  1  0  0  0  0  1  0  0  1  0\n",
       "Railstation       0  0  0  0  0  0  0  1  0  0  1  0  0  0  0  0\n",
       "OneRoomSchool     1  0  0  0  1  1  0  0  1  1  0  0  1  1  0  1\n",
       "Veterinary        0  1  1  1  0  0  1  0  0  0  0  1  0  0  1  0\n",
       "NoDoctor          1  0  0  0  1  1  0  0  1  1  0  0  1  1  0  1\n",
       "NoWaterSupply     0  0  0  0  0  0  0  0  1  1  0  0  1  1  0  0\n",
       "PoliceStation     0  0  0  0  0  0  0  1  0  0  1  0  0  0  0  0\n",
       "LandReallocation  0  1  1  1  0  0  1  0  0  0  0  1  0  0  1  0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = np.array([[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],\n",
    "                 [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0],\n",
    "                 [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],\n",
    "                 [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1],\n",
    "                 [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0],\n",
    "                 [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1],\n",
    "                 [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],\n",
    "                 [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],\n",
    "                 [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0]])\n",
    "\n",
    "columns=[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\"]\n",
    "index=[\"HighSchool\", \"AgricultCoop\", \"Railstation\", \"OneRoomSchool\", \"Veterinary\", \"NoDoctor\", \"NoWaterSupply\",  \"PoliceStation\", \"LandReallocation\"]\n",
    "\n",
    "pd.DataFrame(X, columns=columns, index = index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "converged in 25 iterations!\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>H</th>\n",
       "      <th>K</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>G</th>\n",
       "      <th>L</th>\n",
       "      <th>O</th>\n",
       "      <th>A</th>\n",
       "      <th>E</th>\n",
       "      <th>F</th>\n",
       "      <th>P</th>\n",
       "      <th>I</th>\n",
       "      <th>J</th>\n",
       "      <th>M</th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>HighSchool</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Railstation</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PoliceStation</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AgricultCoop</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Veterinary</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LandReallocation</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OneRoomSchool</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NoDoctor</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NoWaterSupply</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  H  K  B  C  D  G  L  O  A  E  F  P  I  J  M  N\n",
       "HighSchool        1  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n",
       "Railstation       1  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n",
       "PoliceStation     1  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n",
       "AgricultCoop      0  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0\n",
       "Veterinary        0  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0\n",
       "LandReallocation  0  0  1  1  1  1  1  1  0  0  0  0  0  0  0  0\n",
       "OneRoomSchool     0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1\n",
       "NoDoctor          0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1\n",
       "NoWaterSupply     0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u, v = svd_1d(X, 1e-10)\n",
    "\n",
    "sort_u = u.argsort()\n",
    "sort_v = v.argsort()\n",
    "\n",
    "reordered_X = X[:, sort_v]\n",
    "reordered_X = reordered_X[sort_u, :]\n",
    "\n",
    "columns=[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\"]\n",
    "columns = np.array(columns)\n",
    "columns = columns[sort_v]\n",
    "\n",
    "index=[\"HighSchool\", \"AgricultCoop\", \"Railstation\", \"OneRoomSchool\", \"Veterinary\", \"NoDoctor\", \"NoWaterSupply\",  \"PoliceStation\", \"LandReallocation\"]\n",
    "index = np.array(index)\n",
    "index = index[sort_u]\n",
    "\n",
    "pd.DataFrame(reordered_X, index = index, columns = columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x324 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x324 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (8,4.5))\n",
    "plt.imshow(X, cmap='binary', aspect='auto')\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize = (8,4.5))\n",
    "plt.imshow(reordered_X, cmap='binary', aspect='auto')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DonnÃ©es Classic3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
